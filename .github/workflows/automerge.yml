name: Auto Merge PRs

on:
  pull_request:
    types: [labeled, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  automerge:
    if: github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Esperar a que los status checks pasen
        uses: WyriHaximus/github-action-wait-for-status@v1
        with:
          ignoreActions: automerge
          ref: ${{ github.event.pull_request.head.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validar que todas las comprobaciones requeridas han pasado
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.payload.pull_request.head.sha;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runs = await github.paginate(github.rest.actions.listWorkflowRunsForRepo, { owner, repo, head_sha: sha, per_page: 100 });
            const ciRun = runs.find(r => r.name === 'CI' && r.head_sha === sha);
            if (!ciRun) {
              core.setFailed('No se encontró la ejecución del workflow CI para este commit');
              return;
            }
            if (ciRun.status !== 'completed') {
              core.setFailed('El workflow CI aún no ha completado');
              return;
            }
            const jobsResp = await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: ciRun.id, per_page: 100 });
            const jobs = jobsResp.data.jobs || [];
            const findJob = (name) => jobs.find(j => j.name === name);
            const assertJobSuccess = (name) => {
              const job = findJob(name);
              if (!job) {
                core.setFailed(`Falta el job requerido: ${name}`);
                return false;
              }
              if (job.conclusion !== 'success') {
                core.setFailed(`El job ${name} no pasó: ${job.conclusion}`);
                return false;
              }
              return true;
            };
            const lintOk = assertJobSuccess('Lint');
            const unitOk = assertJobSuccess('Unit Tests');
            const e2eOk = assertJobSuccess('E2E Tests');
            const buildOk = assertJobSuccess('Build');
            let visualOk = false;
            const visualJob = findJob('Visual Regression Tests');
            if (!visualJob) {
              core.setFailed('Falta el job requerido: Visual Regression Tests');
            } else {
              const testStep = (visualJob.steps || []).find(s => s.name === 'Run visual tests (inside container)');
              if (!testStep || testStep.conclusion !== 'success') {
                core.setFailed('Los tests de regresión visual no han pasado');
              } else {
                visualOk = true;
              }
            }
            if (!(lintOk && unitOk && e2eOk && buildOk && visualOk)) {
              core.setFailed('No todos los checks requeridos han pasado');
            }

      - name: Habilitar auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
