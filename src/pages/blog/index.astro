---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import Paginator from "../../components/Paginator.astro";
import BlogFilters from "../../components/BlogFilters.astro";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Extraer categorías únicas
const categories = [
  "Todas",
  ...Array.from(
    new Set(
      posts.map(
        (post) =>
          (post.data.categories && post.data.categories[0]) || "Sin categoría"
      )
    )
  ),
];

let selectedCategory = "Todas";
let sortBy = "date-desc";
let viewMode = "grid"; // "grid" o "list"

function filterPosts(posts: any[], category: string, sort: string): any[] {
  let filtered =
    category === "Todas"
      ? posts
      : posts.filter(
          (post) =>
            ((post.data.categories && post.data.categories[0]) ||
              "Sin categoría") === category
        );
  switch (sort) {
    case "date-asc":
      filtered = filtered
        .slice()
        .sort(
          (a: any, b: any) =>
            a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
        );
      break;
    case "date-desc":
      filtered = filtered
        .slice()
        .sort(
          (a: any, b: any) =>
            b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
        );
      break;
    case "title":
      filtered = filtered
        .slice()
        .sort((a: any, b: any) => a.data.title.localeCompare(b.data.title));
      break;
    case "author":
      filtered = filtered
        .slice()
        .sort((a: any, b: any) =>
          (a.data.author || "").localeCompare(b.data.author || "")
        );
      break;
  }
  return filtered;
}

let filteredPosts = filterPosts(posts, selectedCategory, sortBy);

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
const currentPage = 1; // Solo página 1 en este archivo, las siguientes serán /blog/page/[page].astro
const paginatedPosts = filteredPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);
---

<!doctype html>
<html lang="es">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body class="bg-background text-foreground min-h-screen">
    <Header />
    <main class="max-w-6xl mx-auto pt-8 px-4 transition-main">
      <section>
        <div class="mb-8">
          <h1 class="font-serif text-4xl font-bold text-foreground mb-4">
            Todos los Posts
          </h1>
          <p class="text-xl text-muted-foreground">
            Explora nuestra colección completa de artículos sobre tecnología,
            desarrollo y diseño.
          </p>
        </div>
        <!-- Filtros y controles -->
        <BlogFilters
          categories={categories}
          selectedCategory={selectedCategory}
          sortBy={sortBy}
          viewMode={viewMode}
        />
        <!-- Resultados -->
        <div class="mb-6">
          <p class="text-sm text-muted-foreground">
            Mostrando {paginatedPosts.length} de {filteredPosts.length} posts
          </p>
        </div>
        {
          viewMode === "grid" ? (
            <ul class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 list-none m-0 p-0">
              {paginatedPosts.map((post: any) => (
                <li>
                  <a href={`/blog/${post.id}/`} class="block group h-full">
                    <div class="rounded-xl overflow-hidden shadow-sm bg-card border border-border hover:shadow-medium transition-all duration-300 h-full group-hover:-translate-y-1">
                      <div class="aspect-video bg-gradient-to-br from-primary/10 to-accent rounded-t-xl overflow-hidden">
                        <img
                          src={post.data.heroImage}
                          alt={post.data.title}
                          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                        />
                      </div>
                      <div class="p-6 flex flex-col h-full">
                        <span class="inline-block mb-3 px-2 py-1 rounded bg-secondary text-xs text-secondary-foreground font-medium">
                          {(post.data.categories && post.data.categories[0]) ||
                            "Sin categoría"}
                        </span>
                        <h3 class="font-serif text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors line-clamp-2">
                          {post.data.title}
                        </h3>
                        <p class="text-muted-foreground mb-4 line-clamp-3 text-sm leading-relaxed flex-1">
                          {post.data.excerpt || post.data.description || ""}
                        </p>
                        <div class="flex items-center justify-between text-xs text-muted-foreground mt-auto">
                          <div class="flex items-center gap-1">
                            <span class="font-medium">
                              {post.data.author || ""}
                            </span>
                          </div>
                          <div class="flex items-center gap-3">
                            <span>
                              <FormattedDate date={post.data.pubDate} />
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            <ul class="space-y-6 list-none m-0 p-0">
              {paginatedPosts.map((post: any) => (
                <li>
                  <a href={`/blog/${post.id}/`} class="block group">
                    <div class="rounded-xl overflow-hidden shadow-sm bg-card border border-border hover:shadow-medium transition-all duration-300">
                      <div class="grid md:grid-cols-4 gap-6">
                        <div class="md:col-span-1">
                          <div class="aspect-video bg-gradient-to-br from-primary/10 to-accent rounded-lg overflow-hidden">
                            <img
                              src={post.data.heroImage}
                              alt={post.data.title}
                              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                            />
                          </div>
                        </div>
                        <div class="md:col-span-3 flex flex-col h-full">
                          <div class="flex items-start justify-between mb-3">
                            <span class="inline-block px-2 py-1 rounded bg-secondary text-xs text-secondary-foreground font-medium">
                              {(post.data.categories &&
                                post.data.categories[0]) ||
                                "Sin categoría"}
                            </span>
                            <div class="flex items-center gap-3 text-xs text-muted-foreground">
                              <span>
                                <FormattedDate date={post.data.pubDate} />
                              </span>
                            </div>
                          </div>
                          <h3 class="font-serif text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors">
                            {post.data.title}
                          </h3>
                          <p class="text-muted-foreground mb-4 line-clamp-2 flex-1">
                            {post.data.excerpt || post.data.description || ""}
                          </p>
                          <div class="flex items-center justify-between mt-auto">
                            <div class="flex items-center gap-1 text-xs text-muted-foreground">
                              <span class="font-medium">
                                {post.data.author || ""}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </li>
              ))}
            </ul>
          )
        }
        <!-- Paginador -->
        {
          totalPages > 1 && (
            <Paginator currentPage={currentPage} totalPages={totalPages} />
          )
        }
      </section>
    </main>
    <div class="h-20"></div>
  </body>
</html>
