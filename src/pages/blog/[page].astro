---
import Layout from "../../layouts/BlogPost.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import BlogList from "../../components/BlogList.astro";
import { sortPosts, SORT_BY_OPTIONS } from "../../utils/sort-utils";

export const prerender = true;

export async function getStaticPaths() {
  const posts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  const POSTS_PER_PAGE = 6;
  const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }).map((_, i) => ({
    params: { page: String(i + 1) },
  }));
}

const { page } = Astro.params;
const currentPage = Number(page) || 1;

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const categories = [
  "Todas",
  ...Array.from(
    new Set(
      posts.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    )
  ),
];

// Obtener la categoría seleccionada de la query string
const url = new URL(Astro.request.url);
const selectedCategory =
  url.searchParams.get("category")?.toLowerCase() || "todas";

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

let sortBy = "date-desc";
let viewMode: "grid" | "list" = "grid";

function filterPosts(posts: any[], category: string, sort: string): any[] {
  let filtered =
    category === "todas"
      ? posts
      : posts.filter((post) =>
          Array.isArray(post.data.categories)
            ? post.data.categories.some(
                (cat: string) => cat.toLowerCase() === category
              )
            : category === "uncategorized"
        );
  const safeSort = isSortBy(sort) ? sort : "date-desc";
  return sortPosts(filtered, safeSort);
}

let filteredPosts = filterPosts(posts, selectedCategory, sortBy);

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
const paginatedPosts = filteredPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

const getCategoryHref = (cat: string) => {
  const params = new URLSearchParams();
  if (cat !== "todas") params.set("category", cat);
  return (
    `/blog/${currentPage}/` + (params.toString() ? `?${params.toString()}` : "")
  );
};
const getPageHref = (page: number) => {
  const params = new URLSearchParams();
  if (selectedCategory !== "todas") params.set("category", selectedCategory);
  return (
    (page === 1 ? "/blog/" : `/blog/${page}/`) +
    (params.toString() ? `?${params.toString()}` : "")
  );
};
---

<Layout
  title="Todos los Posts"
  description={SITE_DESCRIPTION}
  tags={[]}
  categories={categories.filter((c) => c !== "Todas")}
  draft={false}
>
  <BlogList
    posts={filteredPosts}
    categories={categories}
    selectedCategory={selectedCategory}
    sortBy={sortBy}
    viewMode={viewMode}
    currentPage={currentPage}
    totalPages={totalPages}
    paginatedPosts={paginatedPosts}
    getCategoryHref={getCategoryHref}
    getPageHref={getPageHref}
  />
</Layout>
