---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/BlogPost.astro";
import BlogList from "../../../components/BlogList.astro";
import { filterPostsByTag } from "../tag-utils";
import { sortPosts, SORT_BY_OPTIONS } from "../../../utils/sort-utils";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const tags = posts.map((post) => post.data.tags || []).flat();
  const uniqueTags = [...new Set(tags)];
  const categoriesSet = new Set(
    posts.flatMap((post) =>
      Array.isArray(post.data.categories) ? post.data.categories : []
    )
  );
  const uniqueCategories = [...categoriesSet];
  const paths = [];
  for (const tag of uniqueTags) {
    const filtered = filterPostsByTag(posts, tag);
    const categoriesForTag = new Set(
      filtered.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    );
    for (const category of categoriesForTag) {
      paths.push({ params: { tag, category }, props: { tag, category } });
    }
  }
  return paths;
}

const { tag, category } = Astro.props;
const allPosts = await getCollection("blog");
const postsWithTag = filterPostsByTag(allPosts, tag);

// Extraer categorías únicas de los posts filtrados
const categories = [
  "Todas",
  ...Array.from(
    new Set(
      postsWithTag.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    )
  ),
];

const selectedCategory = category || "Todas";
const sortBy = Astro.url.searchParams.get("sortBy") || "date-desc";
let viewMode: "grid" | "list" =
  (Astro.url.searchParams.get("view") as "grid" | "list") || "grid";

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

function filterByCategory(posts: any[], category: string): any[] {
  if (category === "Todas") return posts;
  return posts.filter((post) => {
    const cats = Array.isArray(post.data.categories)
      ? post.data.categories
      : [];
    return cats.includes(category);
  });
}

const filteredPosts = filterByCategory(postsWithTag, selectedCategory);
const sortedPosts = isSortBy(sortBy)
  ? sortPosts(filteredPosts, sortBy)
  : filteredPosts;

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const currentPage = 1;
const paginatedPosts = sortedPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

const getCategoryHref = (cat: string) => {
  if (cat === "Todas") {
    return `/tags/${tag}/` + (sortBy ? `?sortBy=${sortBy}` : "");
  }
  return `/tags/${tag}/${cat}/` + (sortBy ? `?sortBy=${sortBy}` : "");
};
const getPageHref = (page: number) => {
  if (selectedCategory === "Todas") {
    return (
      (page === 1 ? `/tags/${tag}/` : `/tags/${tag}/${page}/`) +
      (sortBy ? `?sortBy=${sortBy}` : "")
    );
  }
  return (
    (page === 1
      ? `/tags/${tag}/${selectedCategory}/`
      : `/tags/${tag}/${selectedCategory}/${page}/`) +
    (sortBy ? `?sortBy=${sortBy}` : "")
  );
};
---

<Layout
  title={`Posts tagged: ${tag}${selectedCategory !== "Todas" ? `, category: ${selectedCategory}` : ""}`}
  description={`All posts tagged with '${tag}'${selectedCategory !== "Todas" ? ` and category '${selectedCategory}'` : ""}.`}
  tags={[]}
  categories={categories.filter((c) => c !== "Todas")}
  draft={false}
>
  <BlogList
    posts={sortedPosts}
    categories={categories}
    selectedCategory={selectedCategory}
    sortBy={sortBy}
    viewMode={viewMode}
    currentPage={currentPage}
    totalPages={totalPages}
    paginatedPosts={paginatedPosts}
    getCategoryHref={getCategoryHref}
    getPageHref={getPageHref}
  />
</Layout>
