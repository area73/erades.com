---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/BlogPost.astro";
import BlogList from "../../../components/BlogList.astro";
import { filterPostsByTag } from "../tag-utils";
import { sortPosts, SORT_BY_OPTIONS } from "../../../utils/sort-utils";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const tags = posts.map((post) => post.data.tags || []).flat();
  const uniqueTags = [...new Set(tags)];
  // Para cada tag, calcula cuántas páginas necesita
  const POSTS_PER_PAGE = 6;
  const paths = [];
  for (const tag of uniqueTags) {
    const filtered = filterPostsByTag(posts, tag);
    const totalPages = Math.ceil(filtered.length / POSTS_PER_PAGE);
    for (let page = 2; page <= totalPages; page++) {
      paths.push({ params: { tag, page: String(page) }, props: { tag, page } });
    }
  }
  return paths;
}

const { tag, page } = Astro.props;
const allPosts = await getCollection("blog");
const posts = filterPostsByTag(allPosts, tag);

// Extraer categorías únicas de los posts filtrados
const categories = [
  "Todas",
  ...Array.from(
    new Set(
      posts.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    )
  ),
];

const url = new URL(Astro.request.url);
const selectedCategory = url.searchParams.get("category") || "Todas";
const sortBy = url.searchParams.get("sortBy") || "date-desc";
let viewMode = (url.searchParams.get("view") as "grid" | "list") || "grid";

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

function filterPosts(posts: any[], category: string, sort: string): any[] {
  let filtered =
    category === "Todas"
      ? posts
      : posts.filter((post) =>
          Array.isArray(post.data.categories)
            ? post.data.categories.includes(category)
            : category === "Sin categoría"
        );
  const safeSort = isSortBy(sort) ? sort : "date-desc";
  return sortPosts(filtered, safeSort);
}

let filteredPosts = filterPosts(posts, selectedCategory, sortBy);

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(filteredPosts.length / POSTS_PER_PAGE);
const currentPage = Number(page);
const paginatedPosts = filteredPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

const getCategoryHref = (cat: string) => {
  const params = new URLSearchParams();
  if (cat !== "Todas") params.set("category", cat);
  if (sortBy) params.set("sortBy", sortBy);
  return `/tags/${tag}/` + (params.toString() ? `?${params.toString()}` : "");
};
const getPageHref = (page: number) => {
  const params = new URLSearchParams();
  if (selectedCategory !== "Todas") params.set("category", selectedCategory);
  if (sortBy) params.set("sortBy", sortBy);
  return (
    (page === 1 ? `/tags/${tag}/` : `/tags/${tag}/${page}/`) +
    (params.toString() ? `?${params.toString()}` : "")
  );
};
---

<Layout
  title={`Posts tagged: ${tag}`}
  description={`All posts tagged with '${tag}'.`}
  tags={[]}
  categories={categories.filter((c) => c !== "Todas")}
  draft={false}
>
  <BlogList
    posts={filteredPosts}
    categories={categories}
    selectedCategory={selectedCategory}
    sortBy={sortBy}
    viewMode={viewMode}
    currentPage={currentPage}
    totalPages={totalPages}
    paginatedPosts={paginatedPosts}
    getCategoryHref={getCategoryHref}
    getPageHref={getPageHref}
  />
</Layout>
