---
import { getCollection } from "astro:content";
import Layout from "../../layouts/BlogPost.astro";
import BlogList from "../../components/BlogList.astro";
import { filterPostsByTag } from "./tag-utils";
import { sortPosts, SORT_BY_OPTIONS } from "../../utils/sort-utils";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const tags = posts.map((post) => post.data.tags || []).flat();
  const uniqueTags = [...new Set(tags)];
  return uniqueTags.map((tag) => ({
    params: { tag },
    props: { tag },
  }));
}

const { tag } = Astro.props;
const allPosts = await getCollection("blog");
const postsWithTag = filterPostsByTag(allPosts, tag);

// Extraer categorías únicas de los posts filtrados
const categories = [
  "Todas",
  ...Array.from(
    new Set(
      postsWithTag.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    )
  ),
];

let selectedCategory = "Todas";
let sortBy = "date-desc";
let viewMode: "grid" | "list" = "grid";
if (typeof Astro.request !== "undefined") {
  const url = new URL(Astro.request.url);
  selectedCategory = url.searchParams.get("category") || "Todas";
  sortBy = url.searchParams.get("sortBy") || "date-desc";
  const vm = url.searchParams.get("view");
  viewMode = vm === "list" ? "list" : "grid";
}

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

function filterByCategory(posts: any[], category: string): any[] {
  if (category === "Todas") return posts;
  return posts.filter((post) => {
    const cats = Array.isArray(post.data.categories)
      ? post.data.categories
      : [];
    return cats.includes(category);
  });
}

const filteredPosts = filterByCategory(postsWithTag, selectedCategory);
const sortedPosts = isSortBy(sortBy)
  ? sortPosts(filteredPosts, sortBy)
  : filteredPosts;

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const currentPage = 1; // Solo página 1 en este archivo, las siguientes serían /tags/[...tag]/[page].astro
const paginatedPosts = sortedPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

const getCategoryHref = (cat: string) => {
  const params = new URLSearchParams();
  if (cat !== "Todas") params.set("category", cat); // Usa el valor real
  if (sortBy) params.set("sortBy", sortBy);
  // Siempre ir a la página 1 al cambiar de categoría
  return `/tags/${tag}/` + (params.toString() ? `?${params.toString()}` : "");
};
const getPageHref = (page: number) => {
  const params = new URLSearchParams();
  if (selectedCategory !== "Todas") params.set("category", selectedCategory);
  if (sortBy) params.set("sortBy", sortBy);
  return (
    (page === 1 ? `/tags/${tag}/` : `/tags/${tag}/${page}/`) +
    (params.toString() ? `?${params.toString()}` : "")
  );
};
---

<Layout
  title={`Posts tagged: ${tag}`}
  description={`All posts tagged with '${tag}'.`}
  tags={[]}
  categories={categories.filter((c) => c !== "Todas")}
  draft={false}
>
  <BlogList
    posts={sortedPosts}
    categories={categories}
    selectedCategory={selectedCategory}
    sortBy={sortBy}
    viewMode={viewMode}
    currentPage={currentPage}
    totalPages={totalPages}
    paginatedPosts={paginatedPosts}
    getCategoryHref={getCategoryHref}
    getPageHref={getPageHref}
    tag={tag}
  />
</Layout>
