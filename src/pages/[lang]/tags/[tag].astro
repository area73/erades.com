---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/BlogPost.astro";
import BlogList from "../../../components/BlogList.astro";
import { filterPostsByTag } from "./tag-utils";
import { sortPosts, SORT_BY_OPTIONS } from "../../../utils/sort-utils";

// Elimina getStaticPaths, ya no es necesario en SSR
// export async function getStaticPaths() {
//   const posts = await getCollection("blog");
//   const tags = posts.map((post) => post.data.tags || []).flat();
//   const uniqueTags = [...new Set(tags)];
//   return uniqueTags.map((tag) => ({
//     params: { tag },
//     props: { tag },
//   }));
// }

const { lang: langParam } = Astro.params;
const lang = langParam ?? "es";
const allPosts = (await getCollection("blog")).filter(
  (p) => !p.data.draft && p.id.startsWith(`${lang}/`)
);
const tag = Astro.params.tag ?? "";
const postsWithTag = filterPostsByTag(allPosts, tag);

// Extraer categorías únicas de los posts filtrados
const categories = [
  "Todas",
  ...Array.from(
    new Set(
      postsWithTag.flatMap((post) =>
        Array.isArray(post.data.categories) ? post.data.categories : []
      )
    )
  ),
];

const url = new URL(Astro.request.url);
const selectedCategory = url.searchParams.get("category") || "Todas";
const sortByRaw = url.searchParams.get("sortBy") || "date-desc";
const sortBy = SORT_BY_OPTIONS.includes(sortByRaw as any)
  ? (sortByRaw as (typeof SORT_BY_OPTIONS)[number])
  : "date-desc";
const viewMode: "grid" | "list" =
  (url.searchParams.get("viewMode") as "grid" | "list") || "grid";

function filterByCategory(posts: any[], category: string): any[] {
  if (category === "Todas") return posts;
  return posts.filter((post) => {
    const cats = Array.isArray(post.data.categories)
      ? post.data.categories
      : [];
    return cats.includes(category);
  });
}

const filteredPosts = filterByCategory(postsWithTag, selectedCategory);
const sortedPosts = sortPosts(filteredPosts, sortBy);

// Paginación
const POSTS_PER_PAGE = 6;
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const currentPage = 1;
const paginatedPosts = sortedPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

const getCategoryHref = (cat: string) => {
  const params = new URLSearchParams();
  if (cat !== "Todas") params.set("category", cat);
  if (sortBy) params.set("sortBy", sortBy);
  if (viewMode) params.set("viewMode", viewMode);
  return (
    `/${lang}/tags/${tag}/` + (params.toString() ? `?${params.toString()}` : "")
  );
};
const getPageHref = (page: number) => {
  const params = new URLSearchParams();
  if (selectedCategory !== "Todas") params.set("category", selectedCategory);
  if (sortBy) params.set("sortBy", sortBy);
  if (viewMode) params.set("viewMode", viewMode);
  return (
    (page === 1 ? `/${lang}/tags/${tag}/` : `/${lang}/tags/${tag}/${page}/`) +
    (params.toString() ? `?${params.toString()}` : "")
  );
};
---

<Layout
  title={`Posts tagged: ${tag}`}
  description={`All posts tagged with '${tag}'.`}
  tags={[]}
  categories={categories.filter((c) => c !== "Todas")}
  draft={false}
  lang={lang}
>
  <BlogList
    posts={sortedPosts}
    categories={categories}
    selectedCategory={selectedCategory}
    sortBy={sortBy}
    viewMode={viewMode}
    currentPage={currentPage}
    totalPages={totalPages}
    paginatedPosts={paginatedPosts}
    getCategoryHref={getCategoryHref}
    getPageHref={getPageHref}
    tag={tag}
    lang={lang}
  />
</Layout>
