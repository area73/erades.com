---
import Layout from "../../layouts/BlogPost.astro";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Paginator from "../../components/Paginator.astro";
import BlogFilters from "../../components/BlogFilters.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import BlogCard from "../../components/BlogCard.astro";
import NoResults from "../../components/NoResults.astro";
import ResultsInfo from "../../components/ResultsInfo.astro";
import { Search as SearchIcon } from "@lucide/astro";
import { sortPosts, SORT_BY_OPTIONS } from "../../utils/sort-utils";
import { getCollection } from "astro:content";
import { t } from "../../i18n";

const query = Astro.url.searchParams.get("q") || "";

let results = [];
if (query) {
  const { origin } = new URL(Astro.request.url);
  const apiUrl = `${origin}/api/search?q=${encodeURIComponent(query)}`;
  const res = await fetch(apiUrl);
  results = await res.json();
}

const pageParam = Number(Astro.url.searchParams.get("page")) || 1;
const RESULTS_PER_PAGE = 10;
const { lang: langParam } = Astro.params;
const lang = langParam ?? "es";
// Filtrar resultados por categoría seleccionada
const categoryParam = Astro.url.searchParams.get("category") || "Todas";
// Filtrar resultados para excluir drafts, posts sin id válido y que sean del idioma actual
const filteredResults =
  categoryParam === "Todas"
    ? results.filter(
        (post: any) =>
          post.id &&
          typeof post.id === "string" &&
          post.id.length > 0 &&
          post.draft !== true &&
          post.id.startsWith(`${lang}/`)
      )
    : results
        .filter((post: any) =>
          Array.isArray(post.categories)
            ? post.categories.includes(categoryParam)
            : false
        )
        .filter(
          (post: any) =>
            post.id &&
            typeof post.id === "string" &&
            post.id.length > 0 &&
            post.draft !== true &&
            post.id.startsWith(`${lang}/`)
        );
const totalPages = Math.ceil(filteredResults.length / RESULTS_PER_PAGE);
const currentPage = Math.max(1, Math.min(pageParam, totalPages || 1));

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

const rawSortBy = Astro.url.searchParams.get("sortBy") || "date-desc";
const sortBy = isSortBy(rawSortBy) ? rawSortBy : "date-desc";

const rawViewMode = Astro.url.searchParams.get("viewMode");
let viewMode: "grid" | "list" = rawViewMode === "list" ? "list" : "grid";
// Ordenar los resultados filtrados según sortBy
const sortedResults = sortPosts(filteredResults, sortBy);

const paginatedResults = sortedResults.slice(
  (currentPage - 1) * RESULTS_PER_PAGE,
  currentPage * RESULTS_PER_PAGE
);

const categories = [
  ...Array.from(
    new Set(
      results
        .flatMap((r: any) => (Array.isArray(r.categories) ? r.categories : []))
        .filter(Boolean)
    )
  ),
] as string[];
if (!categories.includes("Todas")) categories.unshift("Todas");

const posts = (await getCollection("blog")).filter(
  (p) => !p.data.draft && p.id.startsWith(`${lang}/`)
);
---

<Layout
  title={`Search | ${SITE_TITLE}`}
  description={SITE_DESCRIPTION}
  tags={[]}
  categories={[]}
  draft={false}
  lang={lang}
>
  <section>
    <div class="max-w-[1200px] mx-auto pt-8 transition-main">
      <h2 class="font-serif font-bold text-foreground mb-6 text-center">
        {t(lang as "es" | "en", "search.title")}
      </h2>
      <BlogFilters
        categories={categories}
        selectedCategory={categoryParam}
        sortBy={sortBy}
        viewMode={viewMode}
        getCategoryHref={(cat: string) =>
          `/${lang}/search?q=${encodeURIComponent(query)}&category=${encodeURIComponent(cat)}&viewMode=${viewMode}`}
      />
      <div class="mb-8 mx-auto px-4 text-right">
        <ResultsInfo
          shown={paginatedResults.length}
          total={filteredResults.length}
          query={query}
        />
      </div>
      <div class="mx-auto px-4">
        {
          totalPages > 1 && (
            <Paginator
              currentPage={currentPage}
              totalPages={totalPages}
              getPageHref={(page) =>
                `/${lang}/search?q=${encodeURIComponent(query)}&category=${encodeURIComponent(categoryParam)}&sortBy=${encodeURIComponent(sortBy)}&page=${page}&viewMode=${viewMode}`
              }
            />
          )
        }
        <ul
          class={`grid ${viewMode === "grid" ? "grid-cols-1 md:grid-cols-3 decoration-none" : "grid-cols-1"} gap-8 list-none m-0 p-0`}
        >
          {
            paginatedResults.length === 0 && query ? (
              <li class="col-span-full text-center py-12">
                <NoResults
                  query={query}
                  onResetHref={`/${lang}/search?category=Todas&viewMode=${viewMode}`}
                />
              </li>
            ) : (
              paginatedResults.map((doc: any) => {
                // Si doc.data existe, fusiona id y data en el objeto post
                const post = doc.data ? { ...doc.data, id: doc.id } : doc;
                return (
                  <li>
                    <BlogCard post={post} variant={viewMode} lang={lang} />
                  </li>
                );
              })
            )
          }
        </ul>
        {
          totalPages > 1 && (
            <Paginator
              currentPage={currentPage}
              totalPages={totalPages}
              getPageHref={(page) =>
                `/${lang}/search?q=${encodeURIComponent(query)}&category=${encodeURIComponent(categoryParam)}&sortBy=${encodeURIComponent(sortBy)}&page=${page}&viewMode=${viewMode}`
              }
            />
          )
        }
      </div>
    </div>
  </section>
</Layout>
