---
import Layout from "../../layouts/BlogPost.astro";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Paginator from "../../components/Paginator.astro";
import BlogFilters from "../../components/BlogFilters.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import BlogCard from "../../components/BlogCard.astro";
import NoResults from "../../components/NoResults.astro";
import ResultsInfo from "../../components/ResultsInfo.astro";
import { Search as SearchIcon } from "@lucide/astro";
import { sortPosts, SORT_BY_OPTIONS } from "../../utils/sort-utils";

const query = Astro.url.searchParams.get("q") || "";

let results = [];
if (query) {
  const { origin } = new URL(Astro.request.url);
  const apiUrl = `${origin}/api/search?q=${encodeURIComponent(query)}`;
  const res = await fetch(apiUrl);
  results = await res.json();
}

const pageParam = Number(Astro.url.searchParams.get("page")) || 1;
const RESULTS_PER_PAGE = 10;
// Filtrar resultados por categoría seleccionada
const categoryParam = Astro.url.searchParams.get("category") || "Todas";
const filteredResults =
  categoryParam === "Todas"
    ? results
    : results.filter((post: any) =>
        Array.isArray(post.categories)
          ? post.categories.includes(categoryParam)
          : false
      );
const totalPages = Math.ceil(filteredResults.length / RESULTS_PER_PAGE);
const currentPage = Math.max(1, Math.min(pageParam, totalPages || 1));

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

const rawSortBy = Astro.url.searchParams.get("sortBy") || "date-desc";
const sortBy = isSortBy(rawSortBy) ? rawSortBy : "date-desc";
// Ordenar los resultados filtrados según sortBy
const sortedResults = sortPosts(filteredResults, sortBy);

const paginatedResults = sortedResults.slice(
  (currentPage - 1) * RESULTS_PER_PAGE,
  currentPage * RESULTS_PER_PAGE
);

const categories = [
  ...Array.from(
    new Set(
      results
        .flatMap((r: any) => (Array.isArray(r.categories) ? r.categories : []))
        .filter(Boolean)
    )
  ),
] as string[];
if (!categories.includes("Todas")) categories.unshift("Todas");
---

<Layout
  title={`Search | ${SITE_TITLE}`}
  description={SITE_DESCRIPTION}
  tags={[]}
  categories={[]}
  draft={false}
>
  <section>
    <div class="max-w-[1200px] mx-auto pt-8 transition-main">
      <h1 class="font-serif font-bold text-foreground mb-6 text-center">
        Resultados de búsqueda
      </h1>
      <BlogFilters
        categories={categories}
        selectedCategory={categoryParam}
        sortBy={sortBy}
        viewMode={"grid"}
        getCategoryHref={(cat: string) =>
          `?q=${encodeURIComponent(query)}&category=${encodeURIComponent(cat)}`}
      />
      <div class="mb-8 mx-auto px-4 text-right">
        <ResultsInfo
          shown={paginatedResults.length}
          total={filteredResults.length}
          query={query}
        />
      </div>
      <div class="mx-auto px-4">
        <ul class="grid grid-cols-1 md:grid-cols-3 gap-8 list-none m-0 p-0">
          {
            paginatedResults.length === 0 && query ? (
              <li class="col-span-full text-center py-12">
                <NoResults query={query} onResetHref="?category=Todas" />
              </li>
            ) : (
              paginatedResults.map((doc: any) => {
                const post = doc.data ? doc : { data: doc };
                return (
                  <li>
                    <BlogCard post={post} variant="grid" />
                  </li>
                );
              })
            )
          }
        </ul>
        {
          totalPages > 1 && (
            <Paginator
              currentPage={currentPage}
              totalPages={totalPages}
              getPageHref={(page) =>
                `?q=${encodeURIComponent(query)}&category=${encodeURIComponent(categoryParam)}&sortBy=${encodeURIComponent(sortBy)}&page=${page}`
              }
            />
          )
        }
      </div>
    </div>
  </section>
</Layout>
