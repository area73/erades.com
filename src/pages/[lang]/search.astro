---
import Layout from "../../layouts/BlogPost.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import BlogList from "../../components/BlogList.astro";
import { sortPosts, SORT_BY_OPTIONS } from "../../utils/sort-utils";
import { getCollection } from "astro:content";
import { t } from "../../i18n";

const query = Astro.url.searchParams.get("q") || "";

let results = [];
if (query) {
  const { origin } = new URL(Astro.request.url);
  const apiUrl = `${origin}/api/search?q=${encodeURIComponent(query)}`;
  const res = await fetch(apiUrl);
  results = await res.json();
}

const pageParam = Number(Astro.url.searchParams.get("page")) || 1;
const RESULTS_PER_PAGE = 10;
const { lang: langParam } = Astro.params;
const lang = langParam ?? "es";
// Filtrar resultados por categoría seleccionada
const categoryParam = Astro.url.searchParams.get("category") || "Todas";
// Filtrar resultados para excluir drafts, posts sin id válido y que sean del idioma actual
const filteredResults =
  categoryParam === "Todas"
    ? results.filter(
        (post: any) =>
          post.id &&
          typeof post.id === "string" &&
          post.id.length > 0 &&
          post.draft !== true &&
          post.id.startsWith(`${lang}/`)
      )
    : results
        .filter((post: any) =>
          Array.isArray(post.categories)
            ? post.categories.includes(categoryParam)
            : false
        )
        .filter(
          (post: any) =>
            post.id &&
            typeof post.id === "string" &&
            post.id.length > 0 &&
            post.draft !== true &&
            post.id.startsWith(`${lang}/`)
        );
const totalPages = Math.ceil(filteredResults.length / RESULTS_PER_PAGE);
const currentPage = Math.max(1, Math.min(pageParam, totalPages || 1));

function isSortBy(value: string): value is (typeof SORT_BY_OPTIONS)[number] {
  return SORT_BY_OPTIONS.includes(value as any);
}

const rawSortBy = Astro.url.searchParams.get("sortBy") || "date-desc";
const sortBy = isSortBy(rawSortBy) ? rawSortBy : "date-desc";

const rawViewMode = Astro.url.searchParams.get("viewMode");
let viewMode: "grid" | "list" = rawViewMode === "list" ? "list" : "grid";
// Ordenar los resultados filtrados según sortBy
const sortedResults = sortPosts(filteredResults, sortBy);

const paginatedResults = sortedResults.slice(
  (currentPage - 1) * RESULTS_PER_PAGE,
  currentPage * RESULTS_PER_PAGE
);

const categories = [
  ...Array.from(
    new Set(
      results
        .flatMap((r: any) => (Array.isArray(r.categories) ? r.categories : []))
        .filter(Boolean)
    )
  ),
] as string[];
if (!categories.includes("Todas")) categories.unshift("Todas");

const posts = (await getCollection("blog")).filter(
  (p) => !p.data.draft && p.id.startsWith(`${lang}/`)
);

// Funciones para generar hrefs específicos de search
const getCategoryHref = (cat: string) => {
  const params = new URLSearchParams();
  params.set("q", query);
  if (cat !== "Todas") params.set("category", cat);
  params.set("viewMode", viewMode);
  return `/${lang}/search?${params.toString()}`;
};

const getPageHref = (page: number) => {
  const params = new URLSearchParams();
  params.set("q", query);
  if (categoryParam !== "Todas") params.set("category", categoryParam);
  params.set("sortBy", sortBy);
  params.set("page", page.toString());
  params.set("viewMode", viewMode);
  return `/${lang}/search?${params.toString()}`;
};
---

<Layout
  title={`Search | ${SITE_TITLE}`}
  description={SITE_DESCRIPTION}
  tags={[]}
  categories={[]}
  draft={false}
  lang={lang}
>
  <div class="max-w-[1200px] mx-auto pt-8 transition-main">
    <BlogList
      posts={filteredResults}
      categories={categories}
      selectedCategory={categoryParam}
      sortBy={sortBy}
      viewMode={viewMode}
      currentPage={currentPage}
      totalPages={totalPages}
      paginatedPosts={paginatedResults.map((doc: any) => {
        // Si doc.data existe, fusiona id y data en el objeto post
        return doc.data ? { ...doc.data, id: doc.id } : doc;
      })}
      getCategoryHref={getCategoryHref}
      getPageHref={getPageHref}
      lang={lang as "es" | "en"}
      title={t(lang as "es" | "en", "search.title")}
      description=""
      showTitle={currentPage === 1}
      query={query}
      noResultsResetHref={`/${lang}/search?category=Todas&viewMode=${viewMode}`}
    />
  </div>
</Layout>
