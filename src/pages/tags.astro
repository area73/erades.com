---
import { getCollection } from "astro:content";
import Layout from "../layouts/BlogPost.astro";

const posts = await getCollection("blog");
const tagCounts = posts
  .map((post) => post.data.tags || [])
  .flat()
  .reduce(
    (acc, tag) => {
      acc[tag] = (acc[tag] || 0) + 1;
      return acc;
    },
    {} as Record<string, number>
  );
const uniqueTags = Object.keys(tagCounts).sort(
  (a, b) => tagCounts[b] - tagCounts[a]
);
const minCount = Math.min(...Object.values(tagCounts));
const maxCount = Math.max(...Object.values(tagCounts));

// Map tag count to font size (between 1em and 2.5em)
const getFontSize = (count: number): string => {
  if (maxCount === minCount) return "1.5em";
  const minFont = 1;
  const maxFont = 2.5;
  return `${minFont + ((count - minCount) / (maxCount - minCount)) * (maxFont - minFont)}em`;
};
---

<Layout
  title="Tags"
  description="All tags used in blog posts. Click a tag to see related articles."
  pubDate={new Date()}
  tags={[]}
  categories={[]}
  draft={false}
  heroImage="/blog-placeholder-about.jpg"
>
  <section>
    <div class="flex flex-wrap gap-4 justify-center py-8">
      {
        uniqueTags.map((tag: string) => (
          <a
            href={`/tags/${encodeURIComponent(tag)}/`}
            style={`font-size: ${getFontSize(tagCounts[tag])};`}
            class="font-semibold text-gray-700 hover:text-accent transition-all"
          >
            {tag} ({tagCounts[tag]})
          </a>
        ))
      }
    </div>
  </section>
</Layout>
