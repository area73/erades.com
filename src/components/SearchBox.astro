---
interface Props {
  query?: string;
}

const { query = "" } = Astro.props;
---

<div class="max-w-5xl mx-auto px-4 py-8" id="search-container">
  <!-- Cabecera de resultados -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-foreground mb-2">
      Resultados de búsqueda
    </h1>
    <p class="text-muted-foreground" id="results-count">
      {query ? `Buscando "${query}"...` : ""}
    </p>
  </div>

  <!-- Filtros de categoría -->
  <div class="flex flex-wrap gap-2 mb-8 items-center">
    <svg
      class="h-4 w-4 text-muted-foreground mr-2"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
    >
      <polygon points="22 3 2 3 10 13 10 19 14 21 14 13 22 3"></polygon>
    </svg>
    <span class="text-base text-muted-foreground mr-2 font-[Inter]">
      Filtrar por categoría:
    </span>
    <div id="category-filters">
      <button
        class="px-3 py-1 rounded-full text-sm font-medium border transition-colors duration-150 bg-primary text-primary-foreground border-primary category-btn"
        data-category="all"
      >
        Todas
      </button>
    </div>
  </div>

  <!-- Resultados -->
  <ul
    class="grid grid-cols-1 md:grid-cols-2 gap-8 list-none m-0 p-0"
    id="results-list"
  >
    <!-- Loading state -->
    <li class="col-span-full text-center py-12">
      <div class="animate-pulse">
        <div class="h-8 bg-muted rounded w-48 mx-auto mb-4"></div>
        <div class="h-4 bg-muted rounded w-64 mx-auto"></div>
      </div>
    </li>
  </ul>
</div>

<script define:vars={{ initialQuery: query }}>
  import { Document } from "flexsearch";

  let results = [];
  let index = null;
  let docs = [];
  let selectedCategory = "all";

  const resultsContainer = document.getElementById("results-list");
  const resultsCount = document.getElementById("results-count");
  const categoryFilters = document.getElementById("category-filters");

  // Load search index
  async function loadSearchIndex() {
    try {
      const response = await fetch("/search-index.json");
      const data = await response.json();
      docs = data;

      index = new Document({
        id: "path",
        index: ["title", "description", "tags", "categories", "content"],
        tokenize: "forward",
      });

      data.forEach((doc) => index.add(doc));

      // Perform search if query exists
      if (initialQuery) {
        await performSearch(initialQuery);
      }
    } catch (error) {
      console.error("Error loading search index:", error);
      showError("Error cargando el índice de búsqueda");
    }
  }

  // Perform search
  async function performSearch(searchQuery) {
    if (!index || !searchQuery) {
      results = [];
      renderResults();
      return;
    }

    try {
      let found = await index.search(searchQuery, { limit: 12 });
      if (Array.isArray(found[0])) {
        found = found.flat();
      }
      results = found;
      renderResults();
    } catch (error) {
      console.error("Error performing search:", error);
      showError("Error durante la búsqueda");
    }
  }

  // Render results
  function renderResults() {
    const uniquePaths = Array.from(
      new Set(results.flatMap((doc) => doc.result))
    );

    const filteredDocs = uniquePaths
      .map((path) => docs.find((d) => d.path === path))
      .filter(Boolean)
      .filter(
        (doc) =>
          selectedCategory === "all" ||
          (doc.categories &&
            Array.isArray(doc.categories) &&
            doc.categories.includes(selectedCategory))
      );

    // Update results count
    if (resultsCount) {
      resultsCount.textContent = initialQuery
        ? `Mostrando ${filteredDocs.length} resultados para "${initialQuery}"`
        : "";
    }

    // Update category filters
    updateCategoryFilters(uniquePaths);

    // Render results
    if (filteredDocs.length === 0 && initialQuery) {
      resultsContainer.innerHTML = `
        <li class="col-span-full text-center py-12">
          <svg
            class="mx-auto mb-4 text-muted-foreground"
            width="48"
            height="48"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            viewBox="0 0 24 24"
          >
            <circle cx="11" cy="11" r="8" />
            <line x1="21" y1="21" x2="16.65" y2="16.65" />
          </svg>
          <h3 class="font-serif text-xl font-semibold text-foreground mb-2">
            No se encontraron resultados
          </h3>
          <p class="text-muted-foreground mb-6">
            Intenta con otros términos de búsqueda o cambia los filtros.
          </p>
          <button
            class="px-4 py-2 rounded-md border border-border bg-muted text-muted-foreground hover:bg-primary/10 transition"
            onclick="setCategory('all')"
          >
            Ver todos los posts
          </button>
        </li>
      `;
    } else {
      resultsContainer.innerHTML = filteredDocs
        .map((doc) => createResultItem(doc))
        .join("");
    }
  }

  // Update category filters
  function updateCategoryFilters(uniquePaths) {
    const categories = Array.from(
      new Set(
        uniquePaths
          .map((path) => {
            const doc = docs.find((d) => d.path === path);
            return doc && Array.isArray(doc.categories) ? doc.categories : [];
          })
          .flat()
          .filter(Boolean)
      )
    );

    const allButton = `
      <button
        class="px-3 py-1 rounded-full text-sm font-medium border transition-colors duration-150 category-btn ${
          selectedCategory === "all"
            ? "bg-primary text-primary-foreground border-primary"
            : "bg-muted text-muted-foreground border-border hover:bg-primary/10"
        }"
        data-category="all"
        onclick="setCategory('all')"
      >
        Todas
      </button>
    `;

    const categoryButtons = categories
      .map(
        (cat) => `
      <button
        class="px-3 py-1 rounded-full text-sm font-medium border transition-colors duration-150 category-btn ${
          selectedCategory === cat
            ? "bg-primary text-primary-foreground border-primary"
            : "bg-muted text-muted-foreground border-border hover:bg-primary/10"
        }"
        data-category="${cat}"
        onclick="setCategory('${cat}')"
      >
        ${cat}
      </button>
    `
      )
      .join("");

    categoryFilters.innerHTML = allButton + categoryButtons;
  }

  // Set category filter
  function setCategory(category) {
    selectedCategory = category;
    renderResults();
  }

  // Create result item HTML
  function createResultItem(doc) {
    const heroImage = doc.heroImage
      ? `<img
          width="100%"
          src="${doc.heroImage}"
          alt=""
          class="mb-2 rounded-xl group-hover:shadow-lg transition-all aspect-video object-cover"
        />`
      : "";

    const metaItems = [];
    if (doc.date) {
      metaItems.push(`
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10" />
            <path d="M12 6v6l4 2" />
          </svg>
          ${doc.date}
        </span>
      `);
    }
    if (doc.author) {
      metaItems.push(`
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="7" r="4" />
            <path d="M5.5 21a8.38 8.38 0 0 1 13 0" />
          </svg>
          ${doc.author}
        </span>
      `);
    }
    if (doc.readTime) {
      metaItems.push(`
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10" />
            <path d="M12 6v6l4 2" />
          </svg>
          ${doc.readTime}
        </span>
      `);
    }
    if (doc.category) {
      metaItems.push(`
        <span class="inline-block px-2 py-0.5 rounded bg-secondary text-secondary-foreground font-semibold">
          ${doc.category}
        </span>
      `);
    }

    const tags =
      doc.tags && Array.isArray(doc.tags) && doc.tags.length > 0
        ? `<div class="flex flex-wrap gap-2 mt-auto">
            ${doc.tags
              .map(
                (tag) => `
              <span class="inline-flex items-center px-2 py-0.5 rounded bg-muted text-xs text-muted-foreground border border-border">
                <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <circle cx="12" cy="12" r="10" />
                  <path d="M7 12l5 5 5-5" />
                </svg>
                ${tag}
              </span>
            `
              )
              .join("")}
          </div>`
        : "";

    return `
      <li class="bg-card rounded-xl shadow-soft hover:shadow-medium transition-shadow duration-300 overflow-hidden">
        <a href="${doc.path}" class="block group p-6 h-full">
          ${heroImage}
          <div class="flex flex-col h-full">
            <div class="flex flex-wrap items-center gap-3 mb-3 text-xs text-muted-foreground">
              ${metaItems.join("")}
            </div>
            <div class="flex-1 mb-4">
              <h4 class="m-0 text-lg font-bold text-foreground leading-tight group-hover:text-primary transition-colors duration-200 mb-1">
                ${doc.title}
              </h4>
              <p class="m-0 text-muted-foreground line-clamp-2">
                ${doc.description}
              </p>
            </div>
            ${tags}
          </div>
        </a>
      </li>
    `;
  }

  // Show error message
  function showError(message) {
    resultsContainer.innerHTML = `
      <li class="col-span-full text-center py-12">
        <p class="text-red-500">${message}</p>
      </li>
    `;
  }

  // Make setCategory globally available
  window.setCategory = setCategory;

  // Initialize search
  loadSearchIndex();
</script>
