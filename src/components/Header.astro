---
import HeaderLink from "./HeaderLink.astro";
import HeaderSearchBox from "./HeaderSearchBox.astro";
import { ChevronDown, Menu, Linkedin, X } from "@lucide/astro";
import ThemeToggle from "./ThemeToggle.astro";
import SocialProfileMenu from "./SocialProfileMenu.astro";
import { t } from "../i18n";
import logoImage from "../assets/area73-small.png";
import avatarImage from "../assets/avatar.png";

interface Props {
  lang: string;
}
const { lang } = Astro.props;

let isDark = false;
if (typeof window !== "undefined") {
  isDark = window.document.documentElement.classList.contains("dark");
}
---

<header
  aria-label="header"
  class="w-full sticky top-0 z-40 bg-header-background border-b border-header-border shadow-[0_2px_8px_rgba(0,0,0,0.04)] backdrop-blur supports-[backdrop-filter]:bg-header-background/80"
>
  <div
    class="max-w-[1440px] mx-auto w-full grid grid-cols-[max-content_max-content_auto_min-content] items-center px-6 py-4"
  >
    <div class="flex items-center gap-6 min-w-0">
      <a
        href="/"
        class="flex items-center gap-2 font-bold text-lg whitespace-nowrap"
      >
        <img
          loading="eager"
          src={logoImage.src}
          alt={t(lang as "en" | "es", "logo.alt")}
          class="h-12 w-12 object-contain"
          width="48"
          height="48"
          decoding="async"
          fetchpriority="high"
        />
      </a>
    </div>

    <!-- Mobile Search Box -->
    <div class="flex-1 ml-4 md:hidden">
      <HeaderSearchBox lang={lang} />
    </div>

    <!-- Desktop Navigation -->
    <nav
      class="hidden md:flex mx-8 items-center gap-6 md:gap-4 xl:gap-6 text-[16px] font-medium font-[Inter] text-muted-foreground"
    >
      <HeaderLink
        href={`/${lang}`}
        aria-label={t(lang as "en" | "es", "menu.home")}
        lang={lang}
      >
        {t(lang as "en" | "es", "menu.home")}
      </HeaderLink>
      <HeaderLink
        href={`/${lang}/blog`}
        aria-label={t(lang as "en" | "es", "menu.blog")}
        lang={lang}
      >
        {t(lang as "en" | "es", "menu.blog")}
      </HeaderLink>
      <HeaderLink
        href={`/${lang}/about`}
        aria-label={t(lang as "en" | "es", "menu.about")}
        lang={lang}
      >
        {t(lang as "en" | "es", "menu.about")}
      </HeaderLink>
      <HeaderLink
        href={`/${lang}/tags`}
        aria-label={t(lang as "en" | "es", "menu.tags")}
        lang={lang}
      >
        {t(lang as "en" | "es", "menu.tags")}
      </HeaderLink>
    </nav>

    <div class="grid grid-cols-[auto_max-content] items-center gap-0 min-w-0">
      <div class="hidden md:block">
        <div class="w-full">
          <HeaderSearchBox lang={lang} />
        </div>
      </div>
      <div class="flex items-center gap-0 max-[555px]:hidden">
        <ThemeToggle />
        <div class="flex items-center gap-1 ml-2">
          <button
            id="lang-es"
            class={"px-2 py-1 rounded text-xs font-bold transition " +
              (lang === "es"
                ? "bg-primary text-primary-foreground"
                : "bg-muted text-muted-foreground hover:bg-accent")}
            aria-current={lang === "es" ? "page" : undefined}
          >
            ES
          </button>
          <button
            id="lang-en"
            class={"px-2 py-1 rounded text-xs font-bold transition " +
              (lang === "en"
                ? "bg-primary text-primary-foreground"
                : "bg-muted text-muted-foreground hover:bg-accent")}
            aria-current={lang === "en" ? "page" : undefined}
          >
            EN
          </button>
          <script is:inline>
            if (typeof window !== "undefined") {
              document
                .getElementById("lang-es")
                ?.addEventListener("click", () => {
                  document.cookie =
                    "lang=es; path=/; max-age=" + 60 * 60 * 24 * 365;
                  window.location.pathname = window.location.pathname.replace(
                    /^\/(en|es)/,
                    "/es"
                  );
                });
              document
                .getElementById("lang-en")
                ?.addEventListener("click", () => {
                  document.cookie =
                    "lang=en; path=/; max-age=" + 60 * 60 * 24 * 365;
                  localStorage.removeItem("lang");
                  window.location.pathname = window.location.pathname.replace(
                    /^\/(en|es)/,
                    "/en"
                  );
                });
            }
          </script>
          <div class="relative ml-2 min-w-16">
            <button
              id="avatar-btn"
              type="button"
              class="flex items-center rounded-full border bg-card p-1 focus:outline-none flex-shrink-0 min-w-fit"
              aria-haspopup="true"
              aria-expanded="false"
            >
              <img
                loading="eager"
                src={avatarImage.src}
                alt={t(lang as "en" | "es", "avatar.alt")}
                class="h-8 w-8 rounded-full object-cover"
                width="32"
                height="32"
                decoding="async"
                fetchpriority="auto"
              />
              <ChevronDown class="ml-1 h-4 w-4 text-muted-foreground" />
            </button>
            <SocialProfileMenu
              name="Rodrigo Erades"
              email="rerades@siete3.com"
              linkedinUrl="https://www.linkedin.com/in/siete3/"
              xUrl="https://x.com/area_73"
              lang={lang}
            />
            <script is:inline>
              if (typeof window !== "undefined") {
                const btn = document.getElementById("avatar-btn");
                const menu = document.getElementById("avatar-menu");
                let open = false;
                const toggleMenu = (show) => {
                  open = typeof show === "boolean" ? show : !open;
                  menu.classList.toggle("hidden", !open);
                  btn.setAttribute("aria-expanded", open ? "true" : "false");
                };
                btn.addEventListener("click", (e) => {
                  e.stopPropagation();
                  toggleMenu();
                });
                document.addEventListener("click", (e) => {
                  if (
                    open &&
                    !btn.contains(e.target) &&
                    !menu.contains(e.target)
                  ) {
                    toggleMenu(false);
                  }
                });
                document.addEventListener("keydown", (e) => {
                  if (open && e.key === "Escape") toggleMenu(false);
                });
              }
            </script>
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile Hamburger Button -->
    <button
      id="mobile-menu-btn"
      class="md:hidden flex items-center justify-center w-10 h-10 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors"
      aria-label="Toggle mobile menu"
      aria-expanded="false"
    >
      <Menu class="h-6 w-6" />
    </button>
  </div>

  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-menu-overlay"
    class="md:hidden fixed inset-0 z-50 bg-white hidden"
    aria-hidden="true"
  >
    <div
      class="absolute inset-0 w-full h-screen bg-white border-red-600 border-2 flex flex-col"
    >
      <div class="flex items-center justify-between p-6">
        <h2 class="text-lg font-semibold text-gray-900">Menu</h2>
        <button
          id="mobile-menu-close"
          class="flex items-center justify-center w-8 h-8 rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-100 transition-colors"
          aria-label="Close mobile menu"
        >
          <X class="h-5 w-5" />
        </button>
      </div>

      <!-- Mobile Navigation Links -->
      <nav class="flex flex-col items-center justify-center flex-1 space-y-8">
        <HeaderLink
          href={`/${lang}`}
          aria-label={t(lang as "en" | "es", "menu.home")}
          lang={lang}
          class="block py-4 text-2xl font-semibold text-gray-900 hover:text-blue-600 transition-colors"
        >
          {t(lang as "en" | "es", "menu.home")}
        </HeaderLink>
        <HeaderLink
          href={`/${lang}/blog`}
          aria-label={t(lang as "en" | "es", "menu.blog")}
          lang={lang}
          class="block py-4 text-2xl font-semibold text-gray-900 hover:text-blue-600 transition-colors"
        >
          {t(lang as "en" | "es", "menu.blog")}
        </HeaderLink>
        <HeaderLink
          href={`/${lang}/about`}
          aria-label={t(lang as "en" | "es", "menu.about")}
          lang={lang}
          class="block py-4 text-2xl font-semibold text-gray-900 hover:text-blue-600 transition-colors"
        >
          {t(lang as "en" | "es", "menu.about")}
        </HeaderLink>
        <HeaderLink
          href={`/${lang}/tags`}
          aria-label={t(lang as "en" | "es", "menu.tags")}
          lang={lang}
          class="block py-4 text-2xl font-semibold text-gray-900 hover:text-blue-600 transition-colors"
        >
          {t(lang as "en" | "es", "menu.tags")}
        </HeaderLink>
        <div class="min-[555px]:hidden grid grid-cols-[auto_auto] gap-2">
          <a
            href="https://www.linkedin.com/in/siete3/"
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-2 px-4 py-2 text-sm text-foreground hover:bg-muted transition-colors font-medium"
            aria-label={t(lang as "en" | "es", "social.linkedin")}
            title={t(lang as "en" | "es", "social.linkedin")}
          >
            <Linkedin class="h-4 w-4 text-muted-foreground" />
            LinkedIn
          </a>
          <a
            href="https://x.com/area_73"
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-2 px-4 py-2 text-sm text-foreground hover:bg-muted transition-colors font-medium"
            aria-label={t(lang as "en" | "es", "social.x")}
            title={t(lang as "en" | "es", "social.x")}
          >
            <X class="h-4 w-4 text-muted-foreground" />
            X
          </a>
        </div>
        <div class="min-[555px]:hidden grid grid-cols-[auto_auto] gap-2">
          <button
            id="lang-es"
            class={"px-2 py-1 rounded text-xs font-bold transition " +
              (lang === "es"
                ? "bg-primary text-primary-foreground"
                : "bg-muted text-muted-foreground hover:bg-accent")}
            aria-current={lang === "es" ? "page" : undefined}
          >
            ES
          </button>
          <button
            id="lang-en"
            class={"px-2 py-1 rounded text-xs font-bold transition " +
              (lang === "en"
                ? "bg-primary text-primary-foreground"
                : "bg-muted text-muted-foreground hover:bg-accent")}
            aria-current={lang === "en" ? "page" : undefined}
          >
            EN
          </button>
        </div>
      </nav>
    </div>

    <script is:inline>
      if (typeof window !== "undefined") {
        const mobileMenuBtn = document.getElementById("mobile-menu-btn");
        const mobileMenuOverlay = document.getElementById(
          "mobile-menu-overlay"
        );
        const mobileMenuClose = document.getElementById("mobile-menu-close");

        let mobileMenuOpen = false;

        // Make function globally available
        window.toggleMobileMenu = (show) => {
          mobileMenuOpen = typeof show === "boolean" ? show : !mobileMenuOpen;
          mobileMenuOverlay.classList.toggle("hidden", !mobileMenuOpen);
          mobileMenuBtn.setAttribute(
            "aria-expanded",
            mobileMenuOpen ? "true" : "false"
          );
          console.log("pozi amparo");
          // Prevent body scroll when menu is open
          document.body.style.overflow = mobileMenuOpen ? "hidden" : "";
        };

        mobileMenuBtn.addEventListener("click", () => {
          toggleMobileMenu();
        });

        mobileMenuClose.addEventListener("click", () => {
          toggleMobileMenu(false);
        });

        // Add event listeners to all mobile menu links and buttons
        const mobileMenuLinks = mobileMenuOverlay.querySelectorAll("a, button");
        mobileMenuLinks.forEach((link) => {
          link.addEventListener("click", () => {
            if (mobileMenuOpen) {
              toggleMobileMenu(false);
            }
          });
        });

        // Close menu when clicking outside
        mobileMenuOverlay.addEventListener("click", (e) => {
          if (e.target === mobileMenuOverlay) {
            toggleMobileMenu(false);
          }
        });

        // Close menu on escape key
        document.addEventListener("keydown", (e) => {
          if (mobileMenuOpen && e.key === "Escape") {
            toggleMobileMenu(false);
          }
        });

        // Close menu on window resize to desktop
        window.addEventListener("resize", () => {
          if (window.innerWidth >= 768 && mobileMenuOpen) {
            toggleMobileMenu(false);
          }
        });
      }
    </script>
  </div>
</header>
