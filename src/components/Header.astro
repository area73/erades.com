---
// @ts-expect-error TS7016: React 19 types are built-in, ignore missing declaration error
import { useState } from "react";
import { SearchInput } from "./SearchInput";
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
import HeaderSearchBox from "./HeaderSearchBox.tsx";

let isDark = false;
if (typeof window !== "undefined") {
  isDark = window.document.documentElement.classList.contains("dark");
}
---

<header
  class="w-full flex items-center justify-between px-6 py-4 border-b bg-background sticky top-0 z-50"
>
  <div class="flex items-center gap-6 min-w-0">
    <a
      href="/"
      class="flex items-center gap-2 font-bold text-lg whitespace-nowrap"
    >
      <img
        src="/area73-small.png"
        alt="Area 73 logo"
        class="h-12 w-12 object-contain"
      />
    </a>
  </div>
  <nav class="flex items-center gap-2">
    <HeaderLink href="/">Home</HeaderLink>
    <HeaderLink href="/blog">Posts</HeaderLink>
    <HeaderLink href="/about">About</HeaderLink>
    <HeaderLink href="/categories">Categories</HeaderLink>
    <HeaderLink href="/tags">Tags</HeaderLink>
  </nav>
  <div class="flex items-center gap-6 min-w-0">
    <div class="hidden md:block min-w-0 flex-1">
      <HeaderSearchBox client:only="react" />
    </div>
    <div class="flex items-center gap-4 ml-4">
      <!-- Dark mode switch funcional y visual como el repo de referencia -->
      <button
        id="theme-toggle-btn"
        type="button"
        aria-label="Toggle dark mode"
        class="h-9 w-9 flex items-center justify-center rounded-full bg-transparent hover:bg-secondary/50 transition-colors focus:outline-none"
      >
        <span id="theme-icon"></span>
      </button>
      <script is:inline>
        if (typeof window !== "undefined") {
          const btn = document.getElementById("theme-toggle-btn");
          const iconSpan = document.getElementById("theme-icon");
          const getSvg = (isDark) =>
            isDark
              ? '<svg class="h-4 w-4 text-muted-foreground hover:text-foreground transition-colors" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="5"/><path d="M12 1v2m0 18v2m11-11h-2M3 12H1m16.95 7.07-1.41-1.41M6.34 6.34 4.93 4.93m12.02 0-1.41 1.41M6.34 17.66l-1.41 1.41"/></svg>'
              : '<svg class="h-4 w-4 text-muted-foreground hover:text-foreground transition-colors" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79z"/></svg>';
          const setIcon = () => {
            const isDark = document.documentElement.classList.contains("dark");
            iconSpan.innerHTML = getSvg(isDark);
          };
          setIcon();
          btn.addEventListener("click", () => {
            const isDark = document.documentElement.classList.toggle("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            setIcon();
          });
        }
      </script>
    </div>
  </div>
  <!-- User avatar dropdown visual (shadcn-ui style) -->
  <div class="relative">
    <button
      id="avatar-btn"
      type="button"
      class="flex items-center rounded-full border border-border bg-white dark:bg-gray-800 p-1 focus:outline-none"
      aria-haspopup="true"
      aria-expanded="false"
    >
      <img
        src="/avatar.png"
        alt="User avatar"
        class="h-8 w-8 rounded-full object-cover"
      />
      <svg
        class="ml-2 h-4 w-4 text-gray-500"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        viewBox="0 0 24 24"
        ><path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"
        ></path></svg
      >
    </button>
    <div
      id="avatar-menu"
      class="hidden absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-border focus:outline-none z-50"
    >
      <div class="py-3 px-4 border-b border-border">
        <div class="text-sm font-medium leading-none">Rodrigo Erades</div>
        <div class="text-xs text-muted-foreground truncate">
          rerades@siete3.com
        </div>
      </div>
      <div class="py-1">
        <a
          href="https://linkedin.com/"
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center gap-2 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors font-medium"
        >
          <svg
            class="h-4 w-4 text-muted-foreground"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            viewBox="0 0 24 24"
            ><rect x="4" y="4" width="16" height="16" rx="2"></rect><path
              d="M8 11v5"></path><path d="M8 8v.01"></path><path d="M12 16v-5"
            ></path><path d="M16 16v-3a2 2 0 0 0-4 0"></path></svg
          >
          LinkedIn
        </a>
        <a
          href="https://x.com/"
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center gap-2 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors font-medium"
        >
          <svg
            class="h-4 w-4 text-muted-foreground"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            viewBox="0 0 24 24"
            ><path d="M17 7L7 17"></path><path d="M7 7l10 10"></path></svg
          >
          X
        </a>
      </div>
    </div>
    <script is:inline>
      if (typeof window !== "undefined") {
        const btn = document.getElementById("avatar-btn");
        const menu = document.getElementById("avatar-menu");
        let open = false;
        const toggleMenu = (show) => {
          open = typeof show === "boolean" ? show : !open;
          menu.classList.toggle("hidden", !open);
          btn.setAttribute("aria-expanded", open ? "true" : "false");
        };
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          toggleMenu();
        });
        document.addEventListener("click", (e) => {
          if (open && !btn.contains(e.target) && !menu.contains(e.target)) {
            toggleMenu(false);
          }
        });
        // Opcional: cerrar con Escape
        document.addEventListener("keydown", (e) => {
          if (open && e.key === "Escape") toggleMenu(false);
        });
      }
    </script>
  </div>
</header>
