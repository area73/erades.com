---
// @ts-expect-error TS7016: React 19 types are built-in, ignore missing declaration error
import { useState } from "react";
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
import HeaderSearchBox from "./HeaderSearchBox.astro";
import { Sun, Moon, ChevronDown, Linkedin, X } from "@lucide/astro";
import ThemeToggle from "./ThemeToggle.astro";

let isDark = false;
if (typeof window !== "undefined") {
  isDark = window.document.documentElement.classList.contains("dark");
}
---

<header
  class="w-full sticky top-0 z-40 bg-header-background border-b border-header-border shadow-[0_2px_8px_rgba(0,0,0,0.04)] backdrop-blur supports-[backdrop-filter]:bg-header-background/80"
>
  <div
    class="max-w-[1440px] mx-auto w-full flex items-center justify-between px-6 py-4"
  >
    <div class="flex items-center gap-6 min-w-0">
      <a
        href="/"
        class="flex items-center gap-2 font-bold text-lg whitespace-nowrap"
      >
        <img
          src="/area73-small.png"
          alt="Area 73 logo"
          class="h-12 w-12 object-contain"
        />
      </a>
    </div>
    <nav
      class="flex items-center gap-6 text-[16px] font-medium font-[Inter] text-muted-foreground"
    >
      <HeaderLink href="/">Home</HeaderLink>
      <HeaderLink href="/blog">Posts</HeaderLink>
      <HeaderLink href="/about">About</HeaderLink>
      <HeaderLink href="/tags">Tags y Categor√≠as</HeaderLink>
    </nav>
    <div class="flex items-center gap-6 min-w-0">
      <div class="hidden md:block">
        <div class="w-[420px] max-w-full">
          <HeaderSearchBox />
        </div>
      </div>
      <div class="flex items-center gap-4">
        <div class="flex items-center gap-2">
          <ThemeToggle />
          <div class="relative">
            <button
              id="avatar-btn"
              type="button"
              class="flex items-center rounded-full border bg-card p-1 focus:outline-none"
              aria-haspopup="true"
              aria-expanded="false"
            >
              <img
                src="/avatar.png"
                alt="User avatar"
                class="h-8 w-8 rounded-full object-cover"
              />
              <ChevronDown class="ml-2 h-4 w-4 text-muted-foreground" />
            </button>
            <div
              id="avatar-menu"
              class="hidden absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-popover ring-1 ring-border focus:outline-none z-50"
            >
              <div class="py-3 px-4 border-b">
                <div class="text-sm font-medium leading-none">
                  Rodrigo Erades
                </div>
                <div class="text-xs text-muted-foreground truncate">
                  rerades@siete3.com
                </div>
              </div>
              <div class="py-1">
                <a
                  href="https://linkedin.com/"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-2 px-4 py-2 text-sm text-foreground hover:bg-muted transition-colors font-medium"
                >
                  <Linkedin class="h-4 w-4 text-muted-foreground" />
                  LinkedIn
                </a>
                <a
                  href="https://x.com/"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-2 px-4 py-2 text-sm text-foreground hover:bg-muted transition-colors font-medium"
                >
                  <X class="h-4 w-4 text-muted-foreground" />
                  X
                </a>
              </div>
            </div>
            <script is:inline>
              if (typeof window !== "undefined") {
                const btn = document.getElementById("avatar-btn");
                const menu = document.getElementById("avatar-menu");
                let open = false;
                const toggleMenu = (show) => {
                  open = typeof show === "boolean" ? show : !open;
                  menu.classList.toggle("hidden", !open);
                  btn.setAttribute("aria-expanded", open ? "true" : "false");
                };
                btn.addEventListener("click", (e) => {
                  e.stopPropagation();
                  toggleMenu();
                });
                document.addEventListener("click", (e) => {
                  if (
                    open &&
                    !btn.contains(e.target) &&
                    !menu.contains(e.target)
                  ) {
                    toggleMenu(false);
                  }
                });
                // Opcional: cerrar con Escape
                document.addEventListener("keydown", (e) => {
                  if (open && e.key === "Escape") toggleMenu(false);
                });
              }
            </script>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>
