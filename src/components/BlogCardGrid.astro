---
import FormattedDate from "./FormattedDate.astro";
interface Props {
  post: any;
}
const { post } = Astro.props;

const href = post.data?.path || (post.id ? `/blog/${post.id}/` : "#");
const getReadTime = (content: string): number => {
  if (!content) return 1;
  const words = content.split(/\s+/).length;
  return Math.max(1, Math.round(words / 250));
};
const readTime = getReadTime(post.data.content || "");
---

<a href={href} class="block group h-full">
  <div
    class="bg-card rounded-xl shadow-soft hover:shadow-medium transition-shadow duration-300 overflow-hidden border border-border h-full flex flex-col"
  >
    {
      post.data.heroImage && (
        <div class="aspect-video bg-gradient-to-br from-primary/10 to-accent rounded-t-xl overflow-hidden">
          <img
            src={post.data.heroImage}
            alt={post.data.title}
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
          />
        </div>
      )
    }
    <div class="p-6 flex flex-col flex-1">
      {
        Array.isArray(post.data.categories) &&
          post.data.categories.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-2">
              {post.data.categories.map((category: string) => (
                <span
                  class="inline-flex items-center px-2 py-0.5 rounded bg-secondary text-xs text-secondary-foreground font-medium whitespace-nowrap"
                  title={`Ver posts en la categoría ${category}`}
                >
                  {category}
                </span>
              ))}
            </div>
          )
      }
      <h3
        class="font-serif text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors line-clamp-2"
      >
        {post.data.title}
      </h3>
      <div class="text-xs text-muted-foreground mb-2">
        <FormattedDate
          date={post.data.pubDate ? new Date(post.data.pubDate) : new Date(0)}
        />
        {readTime && <span class="ml-2">· {readTime} min de lectura</span>}
      </div>
      <p
        class="text-muted-foreground mb-4 line-clamp-3 text-sm leading-relaxed flex-1"
      >
        {post.data.excerpt || post.data.description || ""}
      </p>
      <div
        class="flex items-center justify-between text-xs text-muted-foreground mt-auto"
      >
        <div class="flex items-center gap-1">
          <span class="font-medium">{post.data.author || ""}</span>
        </div>
      </div>
      {
        Array.isArray(post.data.tags) && post.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2 mt-4">
            {post.data.tags.map((tag: string) => (
              <span class="inline-flex items-center px-2 py-0.5 rounded bg-muted text-xs text-secondary-foreground border border-border">
                #{tag}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </div>
</a>
