---
import FormattedDate from "./FormattedDate.astro";
import Show from "./Show.astro";

interface Props {
  post: any;
  lang: string;
}
const { post, lang } = Astro.props;
const langPrefix = `${lang}/`;
const postId = post && typeof post.id === "string" ? post.id : "";
const href = `/${lang}/blog/${postId.startsWith(langPrefix) ? postId.slice(langPrefix.length) : postId}/`;
const getReadTime = (content: string): number => {
  if (!content) return 1;
  const words = content.split(/\s+/).length;
  return Math.max(1, Math.round(words / 250));
};
// Permitir content en post o post.data
const content = post.content || (post.data && post.data.content) || "";
const readTime = getReadTime(content);
---

<a href={href} class="block group h-full" aria-label="grid-card">
  <div
    class="bg-card border rounded-xl shadow-soft hover:shadow-medium transition-shadow duration-300 overflow-hidden borderh-full flex flex-col"
  >
    <Show when={post.heroImage || (post.data && post.data.heroImage)}>
      <div
        class="aspect-video bg-gradient-to-br from-primary/10 to-accent rounded-t-xl overflow-hidden"
      >
        <img
          src={post.heroImage || (post.data && post.data.heroImage)}
          alt={post.title || (post.data && post.data.title) || ""}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        />
      </div>
    </Show>
    <div class="p-6 flex flex-col flex-1">
      <Show
        when={Array.isArray(
          post.categories || (post.data && post.data.categories)
        ) &&
          (post.categories || (post.data && post.data.categories)).length > 0}
      >
        <div class="flex flex-wrap gap-2 mb-2">
          {
            (post.categories || (post.data && post.data.categories)).map(
              (category: string) => (
                <span
                  class="inline-flex items-center px-2 py-0.5 rounded bg-secondary text-xs text-secondary-foreground font-medium whitespace-nowrap"
                  title={`Ver posts en la categoría ${category}`}
                >
                  {category}
                </span>
              )
            )
          }
        </div>
      </Show>
      <h3
        aria-label="blog-card-title"
        aria-label="blog-card-title"
        class="font-serif text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors line-clamp-2"
      >
        {post.title || (post.data && post.data.title) || ""}
      </h3>
      <div class="text-xs text-muted-foreground mb-2">
        <FormattedDate
          date={post.pubDate || (post.data && post.data.pubDate)
            ? new Date(post.pubDate || (post.data && post.data.pubDate))
            : new Date(0)}
        />
        <Show when={readTime}>
          <span class="ml-2">· {readTime} min de lectura</span>
        </Show>
      </div>
      <p
        class="text-muted-foreground mb-4 line-clamp-3 text-sm leading-relaxed flex-1"
      >
        {
          post.excerpt ||
            (post.data && post.data.excerpt) ||
            post.description ||
            (post.data && post.data.description) ||
            ""
        }
      </p>
      <div
        class="flex items-center justify-between text-xs text-muted-foreground mt-auto"
      >
        <div class="flex items-center gap-1">
          <span class="font-medium"
            >{post.author || (post.data && post.data.author) || ""}</span
          >
        </div>
      </div>
      <Show
        when={Array.isArray(post.tags || (post.data && post.data.tags)) &&
          (post.tags || (post.data && post.data.tags)).length > 0}
      >
        <div class="flex flex-wrap gap-2 mt-4">
          {
            (post.tags || (post.data && post.data.tags)).map((tag: string) => (
              <span class="inline-flex items-center px-2 py-0.5 rounded bg-muted text-xs text-secondary-foreground border border-border">
                #{tag}
              </span>
            ))
          }
        </div>
      </Show>
    </div>
  </div>
</a>
