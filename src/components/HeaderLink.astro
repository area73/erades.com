---
import type { HTMLAttributes } from "astro/types";
import { Home, FileText, Info, Tag, Hash } from "@lucide/astro";
import If from "./If.astro";
import Show from "./Show.astro";
import Then from "./Then.astro";
import Else from "./Else.astro";
import IconWrapper from "./IconWrapper.astro";

const { href, lang, ...rest } = Astro.props;

const ICONS = {
  [`/${lang}`]: Home,
  [`/${lang}/blog`]: FileText,
  [`/${lang}/about`]: Info,
  [`/${lang}/tags`]: Hash,
} as const;

type Props = HTMLAttributes<"a"> & { lang: string };

const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
const subpath = pathname.match(/[^\/]+/g);
const hrefStr = typeof href === "string" ? href : String(href ?? "");
const hrefWithLang = hrefStr.startsWith(`/${lang}`)
  ? hrefStr
  : `/${lang}${hrefStr.startsWith("/") ? hrefStr : "/" + hrefStr}`;
const clean = (str: string) => str.replace(/\/$/, "");
const current = clean(pathname);
const target = clean(hrefWithLang);
const isHome = target === `/${lang}`;
const isActive = current === target || current.startsWith(target + "/");
const Icon = ICONS[href as keyof typeof ICONS];
---

<a
  href={hrefWithLang}
  class={"inline-flex items-center" +
    (isActive ? " text-primary font-bold" : "")}
  aria-current={isActive ? "page" : undefined}
  {...rest}
>
  <Show when={Icon}>
    <IconWrapper
      Icon={Icon}
      className={"h-4 w-4 mr-2 md:h-6 md:w-6 xl:h-4 xl:w-4 xl:mr-2 md:mr-0 " +
        (isActive ? "text-primary" : "text-muted-foreground")}
    />
  </Show>
  <span
    class="md:hidden lg:inline whitespace-nowrap overflow-hidden text-ellipsis"
  >
    <slot />
  </span>
</a>
