---
import FormattedDate from "./FormattedDate.astro";
import Show from "./Show.astro";
import If from "./If.astro";
interface Props {
  post: any;
  lang: string;
}
const { post, lang } = Astro.props;
const langPrefix = `${lang}/`;
const postId = post && typeof post.id === "string" ? post.id : "";
const href = `/${lang}/blog/${postId.startsWith(langPrefix) ? postId.slice(langPrefix.length) : postId}/`;
// Utilidad para soportar posts aplanados y anidados
const get = (key: string) => post[key] ?? (post.data && post.data[key]);
---

<a href={href} class="block group" aria-label="list-card">
  <div
    class="rounded-xl overflow-hidden shadow-sm bg-card borderhover:shadow-medium transition-all duration-300"
  >
    <div class="grid md:grid-cols-4 gap-6">
      <div class="md:col-span-1 h-full">
        <div
          class="h-full w-full bg-gradient-to-br from-primary/10 to-accent rounded-lg overflow-hidden flex"
        >
          <Show when={get("heroImage")}>
            <img
              src={get("heroImage")}
              alt={get("title") ?? ""}
              class="w-full h-full object-cover object-center transition-transform duration-300 group-hover:scale-105"
              style="display: block;"
            />
          </Show>
        </div>
      </div>
      <div class="md:col-span-3 flex flex-col h-full">
        <div class="flex items-start justify-between">
          <span
            class="inline-block my-2 p-2 py-1 rounded bg-secondary text-xs text-secondary-foreground font-medium"
          >
            {
              Array.isArray(get("categories")) && get("categories").length > 0
                ? get("categories")[0]
                : "Sin categor√≠a"
            }
          </span>
          <div
            class="flex items-center gap-3 text-xs text-muted-foreground m-2"
          >
            <span>
              <FormattedDate
                date={get("pubDate") ? new Date(get("pubDate")) : new Date(0)}
                lang={lang}
              />
            </span>
          </div>
        </div>
        <h3
          aria-label="blog-card-title"
          class="font-serif text-xl font-semibold text-foreground group-hover:text-primary transition-colors"
        >
          {get("title")}
        </h3>
        <p class="text-muted-foreground mb-4 line-clamp-2 flex-1">
          {get("excerpt") || get("description") || ""}
        </p>
        <div class="flex items-center justify-between mt-auto">
          <div class="flex items-center gap-1 text-xs text-muted-foreground">
            <span class="font-medium">{get("author") || ""}</span>
          </div>
        </div>
        <Show when={Array.isArray(get("tags")) && get("tags").length > 0}>
          <div class="flex flex-wrap justify-end gap-2 pb-2 pr-2">
            {
              (get("tags") || []).map((tag: string) => (
                <span class="inline-flex items-center px-2 py-0.5 rounded bg-muted text-xs text-muted-foreground border border-border">
                  #{tag}
                </span>
              ))
            }
          </div>
        </Show>
      </div>
    </div>
  </div>
</a>
